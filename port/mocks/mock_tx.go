// Code generated by MockGen. DO NOT EDIT.
// Source: ./tx.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	port "github.com/w-woong/common/port"
)

// MockTxBeginner is a mock of TxBeginner interface.
type MockTxBeginner struct {
	ctrl     *gomock.Controller
	recorder *MockTxBeginnerMockRecorder
}

// MockTxBeginnerMockRecorder is the mock recorder for MockTxBeginner.
type MockTxBeginnerMockRecorder struct {
	mock *MockTxBeginner
}

// NewMockTxBeginner creates a new mock instance.
func NewMockTxBeginner(ctrl *gomock.Controller) *MockTxBeginner {
	mock := &MockTxBeginner{ctrl: ctrl}
	mock.recorder = &MockTxBeginnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxBeginner) EXPECT() *MockTxBeginnerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTxBeginner) Begin() (port.TxController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(port.TxController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockTxBeginnerMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTxBeginner)(nil).Begin))
}

// MockRWTxBeginner is a mock of RWTxBeginner interface.
type MockRWTxBeginner struct {
	ctrl     *gomock.Controller
	recorder *MockRWTxBeginnerMockRecorder
}

// MockRWTxBeginnerMockRecorder is the mock recorder for MockRWTxBeginner.
type MockRWTxBeginnerMockRecorder struct {
	mock *MockRWTxBeginner
}

// NewMockRWTxBeginner creates a new mock instance.
func NewMockRWTxBeginner(ctrl *gomock.Controller) *MockRWTxBeginner {
	mock := &MockRWTxBeginner{ctrl: ctrl}
	mock.recorder = &MockRWTxBeginnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRWTxBeginner) EXPECT() *MockRWTxBeginnerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockRWTxBeginner) Begin() (port.TxController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(port.TxController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockRWTxBeginnerMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockRWTxBeginner)(nil).Begin))
}

// BeginR mocks base method.
func (m *MockRWTxBeginner) BeginR() (port.TxController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginR")
	ret0, _ := ret[0].(port.TxController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginR indicates an expected call of BeginR.
func (mr *MockRWTxBeginnerMockRecorder) BeginR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginR", reflect.TypeOf((*MockRWTxBeginner)(nil).BeginR))
}

// MockTxController is a mock of TxController interface.
type MockTxController struct {
	ctrl     *gomock.Controller
	recorder *MockTxControllerMockRecorder
}

// MockTxControllerMockRecorder is the mock recorder for MockTxController.
type MockTxControllerMockRecorder struct {
	mock *MockTxController
}

// NewMockTxController creates a new mock instance.
func NewMockTxController(ctrl *gomock.Controller) *MockTxController {
	mock := &MockTxController{ctrl: ctrl}
	mock.recorder = &MockTxControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxController) EXPECT() *MockTxControllerMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTxController) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxControllerMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxController)(nil).Commit))
}

// Rollback mocks base method.
func (m *MockTxController) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxControllerMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTxController)(nil).Rollback))
}

// MockIsolationLevelSetter is a mock of IsolationLevelSetter interface.
type MockIsolationLevelSetter struct {
	ctrl     *gomock.Controller
	recorder *MockIsolationLevelSetterMockRecorder
}

// MockIsolationLevelSetterMockRecorder is the mock recorder for MockIsolationLevelSetter.
type MockIsolationLevelSetterMockRecorder struct {
	mock *MockIsolationLevelSetter
}

// NewMockIsolationLevelSetter creates a new mock instance.
func NewMockIsolationLevelSetter(ctrl *gomock.Controller) *MockIsolationLevelSetter {
	mock := &MockIsolationLevelSetter{ctrl: ctrl}
	mock.recorder = &MockIsolationLevelSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIsolationLevelSetter) EXPECT() *MockIsolationLevelSetterMockRecorder {
	return m.recorder
}

// SetReadCommitted mocks base method.
func (m *MockIsolationLevelSetter) SetReadCommitted(tx port.TxController) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadCommitted", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadCommitted indicates an expected call of SetReadCommitted.
func (mr *MockIsolationLevelSetterMockRecorder) SetReadCommitted(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadCommitted", reflect.TypeOf((*MockIsolationLevelSetter)(nil).SetReadCommitted), tx)
}

// SetReadUncommitted mocks base method.
func (m *MockIsolationLevelSetter) SetReadUncommitted(tx port.TxController) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadUncommitted", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadUncommitted indicates an expected call of SetReadUncommitted.
func (mr *MockIsolationLevelSetterMockRecorder) SetReadUncommitted(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadUncommitted", reflect.TypeOf((*MockIsolationLevelSetter)(nil).SetReadUncommitted), tx)
}

// SetRepeatableRead mocks base method.
func (m *MockIsolationLevelSetter) SetRepeatableRead(tx port.TxController) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRepeatableRead", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRepeatableRead indicates an expected call of SetRepeatableRead.
func (mr *MockIsolationLevelSetterMockRecorder) SetRepeatableRead(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepeatableRead", reflect.TypeOf((*MockIsolationLevelSetter)(nil).SetRepeatableRead), tx)
}

// SetSerializable mocks base method.
func (m *MockIsolationLevelSetter) SetSerializable(tx port.TxController) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSerializable", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSerializable indicates an expected call of SetSerializable.
func (mr *MockIsolationLevelSetterMockRecorder) SetSerializable(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSerializable", reflect.TypeOf((*MockIsolationLevelSetter)(nil).SetSerializable), tx)
}
